/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_FRAME_PB_H_INCLUDED
#define PB_FRAME_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Frame {
    uint8_t chunk_max;
    uint8_t chunk_left;
    uint32_t lenght;
    pb_callback_t data;
} Frame;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Frame_init_default                       {0, 0, 0, {{NULL}, NULL}}
#define Frame_init_zero                          {0, 0, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Frame_chunk_max_tag                      1
#define Frame_chunk_left_tag                     2
#define Frame_lenght_tag                         3
#define Frame_data_tag                           4

/* Struct field encoding specification for nanopb */
#define Frame_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   chunk_max,         1) \
X(a, STATIC,   REQUIRED, UINT32,   chunk_left,        2) \
X(a, STATIC,   REQUIRED, UINT32,   lenght,            3) \
X(a, CALLBACK, REQUIRED, BYTES,    data,              4)
#define Frame_CALLBACK pb_default_field_callback
#define Frame_DEFAULT NULL

extern const pb_msgdesc_t Frame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Frame_fields &Frame_msg

/* Maximum encoded size of messages (where known) */
/* Frame_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
